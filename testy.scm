(define (f x)
    ((lambda (a b g)
        (+ (* a a) (* (g a) a) (* (g b) b))) (+ x 1) (- x 1) (lambda (c) (* c c))))

(println (f 12))

(define (fuckme x)
    (define a (+ x 1))
    (define b (- x 1))
    (define (g c) (* c c))
    (+ (* a a) (* (g a) a) (* (g b) b)))

(println (fuckme 12))


(gcd 123 31)

(if (= 123 0)
    123
    (gcd 123 (% 123 31)))

(gcd 123 (% 123 31))

(if (= (% 123 31) 0)
    123
    (gcd (% 123 31)
         (% 123 (% 123 31))))

(if (= 30 0) ; 1 evaluated
    123
    (gcd (% 123 31)
         (% 123 (% 123 31))))

(gcd (% 123 31) (% 123 (% 123 31)))

(if (= (% 123 (% 123 31)) 0) ; 2 evaluated
    (% 123 31)
    (gcd (% 123 (% 123 31))
         (% (% 123 31) (% 123 (% 123 31)))))

(if (= 3 0)
    (% 123 31)
    (gcd (% 123 (% 123 31))
         (% (% 123 31) (% 123 (% 123 31)))))

 (gcd (% 123 (% 123 31))
      (% (% 123 31) (% 123 (% 123 31))))

(if (= (% (% 123 31) (% 123 (% 123 31))) 0) ; 4 evaluated
    (% 123 (% 123 31))
    (gcd (% (% 123 31) (% 123 (% 123 31)))
         (% (% 123 (% 123 31)) (% (% 123 31) (% 123 (% 123 31))))
